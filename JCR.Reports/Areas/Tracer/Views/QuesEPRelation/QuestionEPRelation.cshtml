
<div>
    <div id="resultQuesEP">
        @(Html.Kendo().Grid<JCR.Reports.Areas.Tracer.ViewModels.QuestionEpRelation>()
      .Name("gridQEPDATA")
      .DataSource(dataSource => dataSource // Configure the grid data source
                                         .Ajax() // Specify that ajax binding is used
                                         .ServerOperation(false)
                                         .Read(read => read
                                                            .Action("_QuestionEpRelationDataExcel", "QuesEPRelation")
                                                            .Data("additionalData")) // Set the action method which will return the data in JSON format

                                          .PageSize(20))
       .ToolBar(tools => tools.Excel())
       .Events(e => e.ExcelExport("excelExport").DataBound("onDataBound"))
       .Excel(excel => excel
                            .AllPages(true)
                            .Filterable(true)
                                    .FileName("Standards Update - Tracers Impacted.xlsx")
                            .ProxyURL(Url.Action("Excel_Export_Save", "Export")))
               .Columns(columns =>
               {
                   if(ViewBag.IsGlobalAdmin)
                   {
                       columns.Bound(p => p.TracerTemplateName).Title("Template Name").Width(200);
                       columns.Bound(p => p.TemplateStatus).Title("Status").Width(150);
                   }
                   else
                   {
                       columns.Bound(p => p.TracerCustomName).Title("Tracer Name").Width(200);
                       columns.Bound(p => p.TracerStatusName).Title("Tracer Status").Width(150);
                   }
                   columns.Bound(p => p.SortOrder).Title("Ques No").Width(150);
                   columns.Bound(p => p.QuestionText).Title("Question Text").Width(550);
                   columns.Bound(p => p.StdEffectiveBeginDate).Title("Effective Date").Width(150).Format("{0:MM/dd/yyyy}");
                   columns.Bound(p => p.EPChangeStatus).Title("EP Change").Width(150);

                   columns.Bound(p => p.ImpactOnQuestion).Title("Impact on Question").Width(200);
                   columns.Bound(p => p.StdEPMappingToQuestion).Title("Before EP").Width(200);
                   columns.Bound(p => p.EPTextMappingToQuestion).Title("Before EP Text").Width(1200);
                   columns.Bound(p => p.ComparedStdEP).Title("After EP").Width(200);
                   columns.Bound(p => p.ComparedEPText).Title("After EP Text").Width(1200);
               })

      .ColumnMenu(columnsmenu => columnsmenu
                 .Columns(true))
      .Filterable(filter => filter
                    .Extra(false)
                    .Operators(operators => operators
                    .ForString(str => str.Clear()
                    .Contains("Contains")
                    .StartsWith("Starts with")
                    .IsEqualTo("Is equal to")
                    .IsNotEqualTo("Is not equal to"))))

      .Sortable() // Enable sorting
      .AutoBind(false)
      .Groupable()
      .Filterable()
      .Reorderable(reorder => reorder.Columns(true))
      .Resizable(resizing => resizing.Columns(true))
      .Scrollable(scrollable => scrollable.Height(700))
      .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(new int[] { 20, 50, 100 })

                        )
        )
    </div>
</div>

<style>
    #gridQEPDATA {
        display: none;
    }
</style>









