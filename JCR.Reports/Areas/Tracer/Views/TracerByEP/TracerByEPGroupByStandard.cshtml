
<div>
    <div id="resultTCSTD">

        @(Html.Kendo().Grid<JCR.Reports.Areas.Tracer.ViewModels.TracerByEPExcel>()
            .Name("gridTCSTD")
                     .ToolBar(tools => tools.Excel())
                          .Excel(excel => excel
                              .AllPages(true)
                                      .FileName("Tracer By EP.xlsx")
                                  .Filterable(true)
                                          .ProxyURL(Url.Action("Excel_Export_Save", "Export"))
                                  )
            .Columns(columns =>
            {
                columns.Bound(p => p.ChapterName).Hidden(true).Width(100);
                columns.Bound(p => p.StandardLabel).Hidden(false).Width(125)
                                    .ClientFooterTemplate("Total Count:")
                                    .ClientGroupFooterTemplate("Count:");
                columns.Bound(p => p.StandardText).Hidden(true).Width(500);
                columns.Bound(p => p.EP).Hidden(false).Width(100);
                columns.Bound(p => p.EPText).Hidden(true).Width(500);
                columns.Bound(p => p.TracerCustomName).Width(175);
                columns.Bound(p => p.TracerResponseTitle).Width(275);
                columns.Bound(p => p.OrgName_Rank3).Width(200);
                columns.Bound(p => p.OrgName_Rank2).Width(200);
                columns.Bound(p => p.OrgName_Rank1_Dept).Width(200);
                columns.Bound(p => p.QuestionText).Width(300);
                columns.Bound(p => p.ObservationDtString).Width(150);
                columns.Bound(p => p.UpdatedDtString).Width(150);
                columns.Bound(p => p.UpdatedByUserName).Width(150);
                columns.Bound(p => p.TracerResponseNote).Width(200);
                columns.Bound(p => p.TracerQuestionNote).Width(200);
                columns.Bound(p => p.Numerator).Width(125)
                    .ClientFooterTemplate("#=sum#")
                    .ClientGroupFooterTemplate("#=setNumeratorTotal(sum)#");
                columns.Bound(p => p.Denominator).Width(125)
                    .ClientFooterTemplate("#=sum#")
                    .ClientGroupFooterTemplate("#=setDenominatorTotal(sum)#");
                columns.Bound(p => p.CompliancePercent).Format("{0:0.0}%")
                    .ClientFooterTemplate("#=kendo.toString((data.Numerator.sum/data.Denominator.sum)*100, '0.0')#%")
                    .ClientGroupFooterTemplate("#= kendo.toString(calculateAggregate(NumeratorTotalValue, DenominatorTotalValue),'0.0') #%")
                    .Width(125);
            })
            .Sortable()
            .AutoBind(false)
            .Scrollable(sc => sc.Height(700))
            .HtmlAttributes(new { style = "font-size:12px;line-height:1em;" })
            .DataSource(dataSource => dataSource // Configure the grid data source
                                        .Ajax() // Specify that ajax binding is used
                                        .ServerOperation(false)
                                        .Events(e => e.Error("error_handler"))
                                        .Read(read => read.Action("_TracerByEPGroupByEPExcel", "TracerByEP").Data("additionalData")) // Set the action method which will return the data in JSON format
                                        .Aggregates(aggregates =>
                                        {
                                            aggregates.Add(p => p.StandardLabel).Count();
                                            aggregates.Add(p => p.Denominator).Sum();
                                            aggregates.Add(p => p.Numerator).Sum();
                                            aggregates.Add(p => p.CompliancePercent).Average();
                                        })
                                        .Group(groups =>
                                            {
                                                groups.Add(p => p.StandardLabel);
                                            })
                                        .Sort(sort =>
                                        {
                                            //sort.Add(p => p.EP);
                                            sort.Add(p => p.ChapterName);
                                            sort.Add(p => p.StandardLabel);
                                            sort.Add(p => p.EP);
                                            sort.Add(p => p.TracerCustomName);
                                            sort.Add(p => p.QuestionText);
                                        })
                                        .PageSize(20))
              .Events(e => e.ExcelExport("excelExport").DataBound("onDataBound"))
            .ColumnMenu(columnsmenu => columnsmenu.Columns(true))
            .Filterable(filter => filter
                    .Extra(false)
                    .Operators(operators => operators
                    .ForString(str => str.Clear()
                    .StartsWith("Starts with")
                    .IsEqualTo("Is equal to")
                    .IsNotEqualTo("Is not equal to")
                    )))
            .Groupable()
            .Reorderable(reorder => reorder.Columns(true))
            .Resizable(resizing => resizing.Columns(true))
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new int[] { 20, 50, 100 }))
            
        )

    </div>
</div>

<style>
    #gridTCSTD {
        display: none;
    }
</style>






