@{
    <script type="text/javascript">
        var ExceedFlag =  @Html.Raw(Json.Encode(TempData["ExceedLimt"]));
    </script>
}
<style type="text/css">
    #lblL1Data {
        margin-left: 10px;
    }

    #gridTracerDepartment .k-icon.k-i-close {
        display: none;
    }

    #gridTracerDepartment .k-icon.k-i-sort-asc-sm {
        display: none;
    }

    .k-i-arrow-s, .k-i-arrow-60-down {
        margin-top: 0px;
    }

    #gridTracerDepartment {
        padding: 0;
    }

    .caretInverse {
        transform: rotate(180deg);
    }

    [role~="presentation"] {
        border: 1px solid #e6e6e6;
        cursor: pointer;
    }

    .nav-pills > li > a {
        border-radius: 2px;
    }

    .nav-pills {
        display: inline-block;
    }

    .disabled-linkb, .disabled-linkb:hover, .disabled-linkb-adv:hover, .disabled-linkb-adv {
        text-decoration: none;
        color: #333333;
    }

    .disabled-linkb-adv {
        padding-left: 30px;
    }

    .disabled-linkb-adv:hover {
        padding-left: 30px;
    }

    .progSelectArrowSpacing {
        margin-right: 10px;
    }

    #tracerColumnExtendMsg {
        color: red;
        text-align: center;
    }

    #recordStatusMsg {
        color: red;
        text-align: center;
    }

    .exportoexcelDept {
        padding: 10px 0 0 10px;
    }

    
    #gridTracerDepartment  .k-grid-header  .k-header  .k-link {
        height: 40px;
    }

</style>


<!--[if IE 8]>
<style>   #lblL1Data {
        margin-left: 30px;
    }</style>
<![endif]-->

<div class="panel panel-default " id="divL1tag" style="border-color:#428bca !important; width:100%;">

    <div class="col-xs-12">
        <div class="row">
            <div class="col-xs-12 text-left exportoexcelDept">
                @(Html.Kendo().Button()
                        .Name("exportoexcelTracerDept")
                        .HtmlAttributes(new { type = "button", @class = "k-button " })
                                .Content("<span class='k-icon k-i-excel'></span><span>&nbsp;</span><span class='glyphfontsize'>Export to Excel</span>")
                                    .Events(e => e.Click("ERExcelExportByTracerDept"))
                )
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12 text-center">
                <span id="spanSelParameters2" style="font-weight:bold;font-size:small"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 text-center ">
                <span id="spanSelParameters3" style="font-weight:bold;font-size:small"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 text-center ">
                <span id="spanSelParameters4" style="font-weight:bold;font-size:small;"></span>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12 text-center">
                <span id="spanSelParameters5" style="font-weight:bold;font-size:small"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 text-center">
                <span id="spanSelParameters6" style="font-weight:bold;font-size:small"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 text-center ">
                <span id="spanSelParameters7" style="font-weight:bold;font-size:small"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 text-center ">
                <span id="spanSelParameters8" style="font-weight:bold;font-size:small;"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 text-center">
                <span id="spanSelParameters9" style="font-weight:bold;font-size:small"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 text-center ">
                <span id="spanSelParameters10" style="font-weight:bold;font-size:small;color:red"></span>
            </div>
        </div>
        <br />
    </div>
    <div class="row" id="recordStatusMsg"> </div>
    <div class="row" id="tracerColumnExtendMsg"> </div>
    <div id="resultSummary">
        @(Html.Kendo().Grid<JCR.Reports.Areas.Tracer.ViewModels.TracerComplianceDashboardData>()
                    .Name("gridTracerDepartment")
                    .ToolBar(tool => tool.Template("<div align='center' style='margin-top:10px;'>Click a Tracer to get details</div>"))
                    .Excel(excel => excel
                                    .AllPages(true)
                                    .FileName("Tracer Compliance – Department Dashboard Graph.xlsx")
                                    .Filterable(true)
                                    .ProxyURL(Url.Action("Excel_Export_Save", "Export"))
                            )
                    .Columns(col =>
                    {
                        col.Bound(p => p.TracerCustomName).Title("Tracer Name").Locked(true).Lockable(false).Width(300).HeaderHtmlAttributes(new { style = "text-align:center" });
                        col.Bound(p => p.OverallTotalCompletedObservation).Title("Overall Total Completed Observations").Locked(true).Lockable(false).Width(150).HtmlAttributes(new { style = "text-align:right" });
                        col.Bound(p => p.OverallTracerCompliance).Title("Overall Tracer Compliance %").Locked(true).Lockable(false).Width(120).HtmlAttributes(new { style = "text-align:right" });
                        for (int i = 0; i < ViewBag.Header.Count; i++)
                        {
                            string c = ViewBag.Header[i].ToString();
                            col.Group(g => g.Title(c).HeaderHtmlAttributes(new { style = "text-align:center;" }).
                                Columns(departmentwise =>
                                {
                                    departmentwise.Bound(p => p.DepartmentwiseTracer[i].TotalCompletedObservation).Title("Total Completed Observations").Width(140).HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                    departmentwise.Bound(p => p.DepartmentwiseTracer[i].Compliance).Title("Tracer Compliance %").Width(140).HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { style = "text-align:right" });
                                }));
                        }
                    })
                    .Sortable()
                    .Selectable()
                    .AutoBind(false)
                    .Scrollable(sc => sc.Height("auto"))
                    .HtmlAttributes(new { style = "font-size:12px;line-height:1em;" })
                    .DataSource(dataSource => dataSource // Configure the grid data source
                            .Ajax() // Specify that ajax binding is used
                            .ServerOperation(false)
                            .Model(m =>
                            {
                                m.Field(p => p.TracerCustomName);
                                m.Field(p => p.OverallTotalCompletedObservation);
                                m.Field(p => p.OverallTracerCompliance);
                                for (int i = 0; i < ViewBag.Header.Count; i++)
                                {
                                    m.Field(p => p.DepartmentwiseTracer[i].TotalCompletedObservation);
                                    m.Field(p => p.DepartmentwiseTracer[i].Compliance);
                                }
                            })
                            .Events(e => e.Error("error_handler"))
                            .Read(read => read.Action("LoadTracerComplianceDepartmentGrid", "TracerComplianceDepartment").Data("additionalData")) // Set the action method which will return the data in JSON format
                            .PageSize(20))
                    .Resizable(resizing => resizing.Columns(true))
                    .Events(e => e.DataBound("LargeTracerGridResize").ExcelExport("PivotExportTracerDept").Change("onTracerClickChange"))
                    .Pageable(pageable => pageable
                        .Refresh(true)
                        .PageSizes(new int[] { 20, 50, 100 }))
        )

    </div>
</div>


