//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JCR.Reports.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBMEdition01_Entities : DbContext
    {
        public DBMEdition01_Entities()
            : base("name=DBMEdition01_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<Site> GetSelectSitesByUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Site>("GetSelectSitesByUser", userIDParameter);
        }
    
        public virtual ObjectResult<string> GetHcoIDs(string siteIDs)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetHcoIDs", siteIDsParameter);
        }
    
        public virtual ObjectResult<CorpUser> GetCorpUsersBySite(string userRoleName, string siteIDs, Nullable<int> statusId)
        {
            var userRoleNameParameter = userRoleName != null ?
                new ObjectParameter("UserRoleName", userRoleName) :
                new ObjectParameter("UserRoleName", typeof(string));
    
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CorpUser>("GetCorpUsersBySite", userRoleNameParameter, siteIDsParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<MockSurvey> GetMockSurveysBySites(string siteList, Nullable<int> statusId, Nullable<int> programID)
        {
            var siteListParameter = siteList != null ?
                new ObjectParameter("SiteList", siteList) :
                new ObjectParameter("SiteList", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MockSurvey>("GetMockSurveysBySites", siteListParameter, statusIdParameter, programIDParameter);
        }
    
        public virtual ObjectResult<usmMSCorporateFindingsReportCumulative_Result> usmMSCorporateFindingsReportCumulative(string siteIDs, string programIDs, string standardTextIDs, string chapterIDs, string ePTextIDs, Nullable<int> scoreType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> matrixID, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<int> cycleID)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardTextIDsParameter = standardTextIDs != null ?
                new ObjectParameter("StandardTextIDs", standardTextIDs) :
                new ObjectParameter("StandardTextIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var ePTextIDsParameter = ePTextIDs != null ?
                new ObjectParameter("EPTextIDs", ePTextIDs) :
                new ObjectParameter("EPTextIDs", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var matrixIDParameter = matrixID.HasValue ?
                new ObjectParameter("MatrixID", matrixID) :
                new ObjectParameter("MatrixID", typeof(int));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cycleIDParameter = cycleID.HasValue ?
                new ObjectParameter("CycleID", cycleID) :
                new ObjectParameter("CycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usmMSCorporateFindingsReportCumulative_Result>("usmMSCorporateFindingsReportCumulative", siteIDsParameter, programIDsParameter, standardTextIDsParameter, chapterIDsParameter, ePTextIDsParameter, scoreTypeParameter, startDateParameter, endDateParameter, matrixIDParameter, onlyFSAEPsParameter, statusIDParameter, cycleIDParameter);
        }
    
        public virtual ObjectResult<SaferMatrixData> GetSaferMatrixData(string siteIDs, string programIDs, string standardTextIDs, string chapterIDs, string ePTextIDs, Nullable<int> scoreType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> matrixID, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<int> cycleID)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardTextIDsParameter = standardTextIDs != null ?
                new ObjectParameter("StandardTextIDs", standardTextIDs) :
                new ObjectParameter("StandardTextIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var ePTextIDsParameter = ePTextIDs != null ?
                new ObjectParameter("EPTextIDs", ePTextIDs) :
                new ObjectParameter("EPTextIDs", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var matrixIDParameter = matrixID.HasValue ?
                new ObjectParameter("MatrixID", matrixID) :
                new ObjectParameter("MatrixID", typeof(int));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cycleIDParameter = cycleID.HasValue ?
                new ObjectParameter("CycleID", cycleID) :
                new ObjectParameter("CycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaferMatrixData>("GetSaferMatrixData", siteIDsParameter, programIDsParameter, standardTextIDsParameter, chapterIDsParameter, ePTextIDsParameter, scoreTypeParameter, startDateParameter, endDateParameter, matrixIDParameter, onlyFSAEPsParameter, statusIDParameter, cycleIDParameter);
        }
    
        public virtual ObjectResult<usmMSCorporateFindingsReportSummary_Result> usmMSCorporateFindingsReportSummary(string siteIDs, string programIDs, string standardTextIDs, string chapterIDs, string ePTextIDs, Nullable<int> scoreType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> matrixID, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<int> cycleID)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardTextIDsParameter = standardTextIDs != null ?
                new ObjectParameter("StandardTextIDs", standardTextIDs) :
                new ObjectParameter("StandardTextIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var ePTextIDsParameter = ePTextIDs != null ?
                new ObjectParameter("EPTextIDs", ePTextIDs) :
                new ObjectParameter("EPTextIDs", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var matrixIDParameter = matrixID.HasValue ?
                new ObjectParameter("MatrixID", matrixID) :
                new ObjectParameter("MatrixID", typeof(int));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cycleIDParameter = cycleID.HasValue ?
                new ObjectParameter("CycleID", cycleID) :
                new ObjectParameter("CycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usmMSCorporateFindingsReportSummary_Result>("usmMSCorporateFindingsReportSummary", siteIDsParameter, programIDsParameter, standardTextIDsParameter, chapterIDsParameter, ePTextIDsParameter, scoreTypeParameter, startDateParameter, endDateParameter, matrixIDParameter, onlyFSAEPsParameter, statusIDParameter, cycleIDParameter);
        }
    
        public virtual ObjectResult<SaferMatrixSummary> GetSaferMatrixSummary(string siteIDs, string programIDs, string standardTextIDs, string chapterIDs, string ePTextIDs, Nullable<int> scoreType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> matrixID, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<int> cycleID)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardTextIDsParameter = standardTextIDs != null ?
                new ObjectParameter("StandardTextIDs", standardTextIDs) :
                new ObjectParameter("StandardTextIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var ePTextIDsParameter = ePTextIDs != null ?
                new ObjectParameter("EPTextIDs", ePTextIDs) :
                new ObjectParameter("EPTextIDs", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var matrixIDParameter = matrixID.HasValue ?
                new ObjectParameter("MatrixID", matrixID) :
                new ObjectParameter("MatrixID", typeof(int));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cycleIDParameter = cycleID.HasValue ?
                new ObjectParameter("CycleID", cycleID) :
                new ObjectParameter("CycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaferMatrixSummary>("GetSaferMatrixSummary", siteIDsParameter, programIDsParameter, standardTextIDsParameter, chapterIDsParameter, ePTextIDsParameter, scoreTypeParameter, startDateParameter, endDateParameter, matrixIDParameter, onlyFSAEPsParameter, statusIDParameter, cycleIDParameter);
        }
    
        public virtual ObjectResult<usmMSCorporateFindingsReportSummaryBySite_Result> usmMSCorporateFindingsReportSummaryBySite(string siteIDs, string programIDs, string standardTextIDs, string chapterIDs, string ePTextIDs, Nullable<int> scoreType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> matrixID, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<int> cycleID)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardTextIDsParameter = standardTextIDs != null ?
                new ObjectParameter("StandardTextIDs", standardTextIDs) :
                new ObjectParameter("StandardTextIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var ePTextIDsParameter = ePTextIDs != null ?
                new ObjectParameter("EPTextIDs", ePTextIDs) :
                new ObjectParameter("EPTextIDs", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var matrixIDParameter = matrixID.HasValue ?
                new ObjectParameter("MatrixID", matrixID) :
                new ObjectParameter("MatrixID", typeof(int));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cycleIDParameter = cycleID.HasValue ?
                new ObjectParameter("CycleID", cycleID) :
                new ObjectParameter("CycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usmMSCorporateFindingsReportSummaryBySite_Result>("usmMSCorporateFindingsReportSummaryBySite", siteIDsParameter, programIDsParameter, standardTextIDsParameter, chapterIDsParameter, ePTextIDsParameter, scoreTypeParameter, startDateParameter, endDateParameter, matrixIDParameter, onlyFSAEPsParameter, statusIDParameter, cycleIDParameter);
        }
    
        public virtual ObjectResult<SaferMatrixSummaryBySite> GetSaferMatrixSummaryBySite(string siteIDs, string programIDs, string standardTextIDs, string chapterIDs, string ePTextIDs, Nullable<int> scoreType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> matrixID, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<int> cycleID)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardTextIDsParameter = standardTextIDs != null ?
                new ObjectParameter("StandardTextIDs", standardTextIDs) :
                new ObjectParameter("StandardTextIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var ePTextIDsParameter = ePTextIDs != null ?
                new ObjectParameter("EPTextIDs", ePTextIDs) :
                new ObjectParameter("EPTextIDs", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var matrixIDParameter = matrixID.HasValue ?
                new ObjectParameter("MatrixID", matrixID) :
                new ObjectParameter("MatrixID", typeof(int));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cycleIDParameter = cycleID.HasValue ?
                new ObjectParameter("CycleID", cycleID) :
                new ObjectParameter("CycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaferMatrixSummaryBySite>("GetSaferMatrixSummaryBySite", siteIDsParameter, programIDsParameter, standardTextIDsParameter, chapterIDsParameter, ePTextIDsParameter, scoreTypeParameter, startDateParameter, endDateParameter, matrixIDParameter, onlyFSAEPsParameter, statusIDParameter, cycleIDParameter);
        }
    
        public virtual ObjectResult<usmMSCorporateFindingsReportSummaryByChapter_Result> usmMSCorporateFindingsReportSummaryByChapter(string siteIDs, string programIDs, string standardTextIDs, string chapterIDs, string ePTextIDs, Nullable<int> scoreType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> matrixID, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<int> cycleID)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardTextIDsParameter = standardTextIDs != null ?
                new ObjectParameter("StandardTextIDs", standardTextIDs) :
                new ObjectParameter("StandardTextIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var ePTextIDsParameter = ePTextIDs != null ?
                new ObjectParameter("EPTextIDs", ePTextIDs) :
                new ObjectParameter("EPTextIDs", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var matrixIDParameter = matrixID.HasValue ?
                new ObjectParameter("MatrixID", matrixID) :
                new ObjectParameter("MatrixID", typeof(int));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cycleIDParameter = cycleID.HasValue ?
                new ObjectParameter("CycleID", cycleID) :
                new ObjectParameter("CycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usmMSCorporateFindingsReportSummaryByChapter_Result>("usmMSCorporateFindingsReportSummaryByChapter", siteIDsParameter, programIDsParameter, standardTextIDsParameter, chapterIDsParameter, ePTextIDsParameter, scoreTypeParameter, startDateParameter, endDateParameter, matrixIDParameter, onlyFSAEPsParameter, statusIDParameter, cycleIDParameter);
        }
    
        public virtual ObjectResult<SaferMatrixSummaryByChapter> GetSaferMatrixSummaryByChapter(string siteIDs, string programIDs, string standardTextIDs, string chapterIDs, string ePTextIDs, Nullable<int> scoreType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> matrixID, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<int> cycleID)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardTextIDsParameter = standardTextIDs != null ?
                new ObjectParameter("StandardTextIDs", standardTextIDs) :
                new ObjectParameter("StandardTextIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var ePTextIDsParameter = ePTextIDs != null ?
                new ObjectParameter("EPTextIDs", ePTextIDs) :
                new ObjectParameter("EPTextIDs", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var matrixIDParameter = matrixID.HasValue ?
                new ObjectParameter("MatrixID", matrixID) :
                new ObjectParameter("MatrixID", typeof(int));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var cycleIDParameter = cycleID.HasValue ?
                new ObjectParameter("CycleID", cycleID) :
                new ObjectParameter("CycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaferMatrixSummaryByChapter>("GetSaferMatrixSummaryByChapter", siteIDsParameter, programIDsParameter, standardTextIDsParameter, chapterIDsParameter, ePTextIDsParameter, scoreTypeParameter, startDateParameter, endDateParameter, matrixIDParameter, onlyFSAEPsParameter, statusIDParameter, cycleIDParameter);
        }
    
        public virtual ObjectResult<AssignmentStatusByUser_UserData> GetAssignmentStatusByUser_UserWise(string siteList, Nullable<int> programID, string chapterList, string standardList, Nullable<int> scoreType, string assignedToList, Nullable<bool> includeFSA, Nullable<bool> docRequired, Nullable<bool> newChangedEPs, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, string scoreValue)
        {
            var siteListParameter = siteList != null ?
                new ObjectParameter("SiteList", siteList) :
                new ObjectParameter("SiteList", typeof(string));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var assignedToListParameter = assignedToList != null ?
                new ObjectParameter("AssignedToList", assignedToList) :
                new ObjectParameter("AssignedToList", typeof(string));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(bool));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(bool));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(bool));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var scoreValueParameter = scoreValue != null ?
                new ObjectParameter("ScoreValue", scoreValue) :
                new ObjectParameter("ScoreValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AssignmentStatusByUser_UserData>("GetAssignmentStatusByUser_UserWise", siteListParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeParameter, assignedToListParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, scoreValueParameter);
        }
    
        public virtual ObjectResult<AssignmentStatusByUser_EPData> GetAssignmentStatusByUser_EPWise(string siteList, Nullable<int> programID, string chapterList, string standardList, Nullable<int> scoreType, string assignedToList, Nullable<bool> includeFSA, Nullable<bool> docRequired, Nullable<bool> newChangedEPs, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, string scoreValue, Nullable<int> levelIdentifier)
        {
            var siteListParameter = siteList != null ?
                new ObjectParameter("SiteList", siteList) :
                new ObjectParameter("SiteList", typeof(string));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var assignedToListParameter = assignedToList != null ?
                new ObjectParameter("AssignedToList", assignedToList) :
                new ObjectParameter("AssignedToList", typeof(string));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(bool));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(bool));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(bool));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var scoreValueParameter = scoreValue != null ?
                new ObjectParameter("ScoreValue", scoreValue) :
                new ObjectParameter("ScoreValue", typeof(string));
    
            var levelIdentifierParameter = levelIdentifier.HasValue ?
                new ObjectParameter("LevelIdentifier", levelIdentifier) :
                new ObjectParameter("LevelIdentifier", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AssignmentStatusByUser_EPData>("GetAssignmentStatusByUser_EPWise", siteListParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeParameter, assignedToListParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, scoreValueParameter, levelIdentifierParameter);
        }
    
        public virtual ObjectResult<AssignedToUser> GetUserAssignedToSiteIDAndAssignment(string siteList, string programList, string chapterList, string standardList, Nullable<int> scoreType, Nullable<bool> includeFSA, Nullable<bool> docRequired, Nullable<bool> newChangedEPs, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate)
        {
            var siteListParameter = siteList != null ?
                new ObjectParameter("SiteList", siteList) :
                new ObjectParameter("SiteList", typeof(string));
    
            var programListParameter = programList != null ?
                new ObjectParameter("ProgramList", programList) :
                new ObjectParameter("ProgramList", typeof(string));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(bool));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(bool));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(bool));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AssignedToUser>("GetUserAssignedToSiteIDAndAssignment", siteListParameter, programListParameter, chapterListParameter, standardListParameter, scoreTypeParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter);
        }
    
        public virtual ObjectResult<AssignmentStatusByUser_ChapterData> GetAssignmentStatusByUser_ChapterWise(Nullable<int> siteID, Nullable<int> programID, string chapterList, string standardList, Nullable<int> scoreType, Nullable<int> assignedToID, Nullable<bool> includeFSA, Nullable<bool> docRequired, Nullable<bool> newChangedEPs, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, string scoreValue)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var assignedToIDParameter = assignedToID.HasValue ?
                new ObjectParameter("AssignedToID", assignedToID) :
                new ObjectParameter("AssignedToID", typeof(int));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(bool));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(bool));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(bool));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var scoreValueParameter = scoreValue != null ?
                new ObjectParameter("ScoreValue", scoreValue) :
                new ObjectParameter("ScoreValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AssignmentStatusByUser_ChapterData>("GetAssignmentStatusByUser_ChapterWise", siteIDParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeParameter, assignedToIDParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, scoreValueParameter);
        }
    
        public virtual ObjectResult<AssignmentStatusByUser_StandardData> GetAssignmentStatusByUser_StandardWise(Nullable<int> siteID, Nullable<int> programID, Nullable<int> chapterID, string standardList, Nullable<int> scoreType, Nullable<int> assignedToID, Nullable<bool> includeFSA, Nullable<bool> docRequired, Nullable<bool> newChangedEPs, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, string scoreValue)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterIDParameter = chapterID.HasValue ?
                new ObjectParameter("ChapterID", chapterID) :
                new ObjectParameter("ChapterID", typeof(int));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeParameter = scoreType.HasValue ?
                new ObjectParameter("ScoreType", scoreType) :
                new ObjectParameter("ScoreType", typeof(int));
    
            var assignedToIDParameter = assignedToID.HasValue ?
                new ObjectParameter("AssignedToID", assignedToID) :
                new ObjectParameter("AssignedToID", typeof(int));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(bool));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(bool));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(bool));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var scoreValueParameter = scoreValue != null ?
                new ObjectParameter("ScoreValue", scoreValue) :
                new ObjectParameter("ScoreValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AssignmentStatusByUser_StandardData>("GetAssignmentStatusByUser_StandardWise", siteIDParameter, programIDParameter, chapterIDParameter, standardListParameter, scoreTypeParameter, assignedToIDParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, scoreValueParameter);
        }
    
        public virtual ObjectResult<usmMSGetSaferMap_Result> usmMSGetSaferMap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usmMSGetSaferMap_Result>("usmMSGetSaferMap");
        }
    
        public virtual ObjectResult<SafterMap> GetSafterMap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SafterMap>("GetSafterMap");
        }
    
        public virtual ObjectResult<RFIProgramFinding> GetRFIFindingbyProgram(string siteIDs, string programIDs, string standardIDs, string chapterIDs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> onlyFSAEPs, Nullable<bool> rFIInclude, Nullable<bool> pSInclude, Nullable<bool> fSInclude)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardIDsParameter = standardIDs != null ?
                new ObjectParameter("StandardIDs", standardIDs) :
                new ObjectParameter("StandardIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var rFIIncludeParameter = rFIInclude.HasValue ?
                new ObjectParameter("RFIInclude", rFIInclude) :
                new ObjectParameter("RFIInclude", typeof(bool));
    
            var pSIncludeParameter = pSInclude.HasValue ?
                new ObjectParameter("PSInclude", pSInclude) :
                new ObjectParameter("PSInclude", typeof(bool));
    
            var fSIncludeParameter = fSInclude.HasValue ?
                new ObjectParameter("FSInclude", fSInclude) :
                new ObjectParameter("FSInclude", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFIProgramFinding>("GetRFIFindingbyProgram", siteIDsParameter, programIDsParameter, standardIDsParameter, chapterIDsParameter, startDateParameter, endDateParameter, onlyFSAEPsParameter, rFIIncludeParameter, pSIncludeParameter, fSIncludeParameter);
        }
    
        public virtual ObjectResult<RFIChapterFinding> GetRFIFindingbyChapter(string siteIDs, string programIDs, string standardIDs, string chapterIDs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> onlyFSAEPs, Nullable<bool> rFIInclude, Nullable<bool> pSInclude, Nullable<bool> fSInclude)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardIDsParameter = standardIDs != null ?
                new ObjectParameter("StandardIDs", standardIDs) :
                new ObjectParameter("StandardIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var rFIIncludeParameter = rFIInclude.HasValue ?
                new ObjectParameter("RFIInclude", rFIInclude) :
                new ObjectParameter("RFIInclude", typeof(bool));
    
            var pSIncludeParameter = pSInclude.HasValue ?
                new ObjectParameter("PSInclude", pSInclude) :
                new ObjectParameter("PSInclude", typeof(bool));
    
            var fSIncludeParameter = fSInclude.HasValue ?
                new ObjectParameter("FSInclude", fSInclude) :
                new ObjectParameter("FSInclude", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFIChapterFinding>("GetRFIFindingbyChapter", siteIDsParameter, programIDsParameter, standardIDsParameter, chapterIDsParameter, startDateParameter, endDateParameter, onlyFSAEPsParameter, rFIIncludeParameter, pSIncludeParameter, fSIncludeParameter);
        }
    
        public virtual ObjectResult<RFIStandardFinding> GetRFIFindingByStandard(string siteIDs, string programIDs, string standardIDs, string chapterIDs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> onlyFSAEPs, Nullable<bool> rFIInclude, Nullable<bool> pSInclude, Nullable<bool> fSInclude)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardIDsParameter = standardIDs != null ?
                new ObjectParameter("StandardIDs", standardIDs) :
                new ObjectParameter("StandardIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var rFIIncludeParameter = rFIInclude.HasValue ?
                new ObjectParameter("RFIInclude", rFIInclude) :
                new ObjectParameter("RFIInclude", typeof(bool));
    
            var pSIncludeParameter = pSInclude.HasValue ?
                new ObjectParameter("PSInclude", pSInclude) :
                new ObjectParameter("PSInclude", typeof(bool));
    
            var fSIncludeParameter = fSInclude.HasValue ?
                new ObjectParameter("FSInclude", fSInclude) :
                new ObjectParameter("FSInclude", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFIStandardFinding>("GetRFIFindingByStandard", siteIDsParameter, programIDsParameter, standardIDsParameter, chapterIDsParameter, startDateParameter, endDateParameter, onlyFSAEPsParameter, rFIIncludeParameter, pSIncludeParameter, fSIncludeParameter);
        }
    
        public virtual ObjectResult<User> GetUserInfo(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("GetUserInfo", userIDParameter);
        }
    
        public virtual ObjectResult<CorpChapterFinding> GetCorpFindingByChapter(string siteIDs, string mockSurveyIDs, string mSTeamLeadIDs, string mSTeamMemberIDs, string programIDs, string standardIDs, string chapterIDs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> rFIInclude, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<System.DateTime> standardEffBeginDate)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var mockSurveyIDsParameter = mockSurveyIDs != null ?
                new ObjectParameter("MockSurveyIDs", mockSurveyIDs) :
                new ObjectParameter("MockSurveyIDs", typeof(string));
    
            var mSTeamLeadIDsParameter = mSTeamLeadIDs != null ?
                new ObjectParameter("MSTeamLeadIDs", mSTeamLeadIDs) :
                new ObjectParameter("MSTeamLeadIDs", typeof(string));
    
            var mSTeamMemberIDsParameter = mSTeamMemberIDs != null ?
                new ObjectParameter("MSTeamMemberIDs", mSTeamMemberIDs) :
                new ObjectParameter("MSTeamMemberIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardIDsParameter = standardIDs != null ?
                new ObjectParameter("StandardIDs", standardIDs) :
                new ObjectParameter("StandardIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rFIIncludeParameter = rFIInclude.HasValue ?
                new ObjectParameter("RFIInclude", rFIInclude) :
                new ObjectParameter("RFIInclude", typeof(bool));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CorpChapterFinding>("GetCorpFindingByChapter", siteIDsParameter, mockSurveyIDsParameter, mSTeamLeadIDsParameter, mSTeamMemberIDsParameter, programIDsParameter, standardIDsParameter, chapterIDsParameter, startDateParameter, endDateParameter, rFIIncludeParameter, onlyFSAEPsParameter, statusIDParameter, standardEffBeginDateParameter);
        }
    
        public virtual ObjectResult<CorpEPFinding> GetCorpFindingByEP(string siteIDs, string mockSurveyIDs, string mSTeamLeadIDs, string mSTeamMemberIDs, string programIDs, string standardIDs, string chapterIDs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> rFIInclude, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<System.DateTime> standardEffBeginDate)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var mockSurveyIDsParameter = mockSurveyIDs != null ?
                new ObjectParameter("MockSurveyIDs", mockSurveyIDs) :
                new ObjectParameter("MockSurveyIDs", typeof(string));
    
            var mSTeamLeadIDsParameter = mSTeamLeadIDs != null ?
                new ObjectParameter("MSTeamLeadIDs", mSTeamLeadIDs) :
                new ObjectParameter("MSTeamLeadIDs", typeof(string));
    
            var mSTeamMemberIDsParameter = mSTeamMemberIDs != null ?
                new ObjectParameter("MSTeamMemberIDs", mSTeamMemberIDs) :
                new ObjectParameter("MSTeamMemberIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardIDsParameter = standardIDs != null ?
                new ObjectParameter("StandardIDs", standardIDs) :
                new ObjectParameter("StandardIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rFIIncludeParameter = rFIInclude.HasValue ?
                new ObjectParameter("RFIInclude", rFIInclude) :
                new ObjectParameter("RFIInclude", typeof(bool));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CorpEPFinding>("GetCorpFindingByEP", siteIDsParameter, mockSurveyIDsParameter, mSTeamLeadIDsParameter, mSTeamMemberIDsParameter, programIDsParameter, standardIDsParameter, chapterIDsParameter, startDateParameter, endDateParameter, rFIIncludeParameter, onlyFSAEPsParameter, statusIDParameter, standardEffBeginDateParameter);
        }
    
        public virtual ObjectResult<CorpProgramFinding> GetCorpFindingByProgram(string siteIDs, string mockSurveyIDs, string mSTeamLeadIDs, string mSTeamMemberIDs, string programIDs, string standardIDs, string chapterIDs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> rFIInclude, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<System.DateTime> standardEffBeginDate)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var mockSurveyIDsParameter = mockSurveyIDs != null ?
                new ObjectParameter("MockSurveyIDs", mockSurveyIDs) :
                new ObjectParameter("MockSurveyIDs", typeof(string));
    
            var mSTeamLeadIDsParameter = mSTeamLeadIDs != null ?
                new ObjectParameter("MSTeamLeadIDs", mSTeamLeadIDs) :
                new ObjectParameter("MSTeamLeadIDs", typeof(string));
    
            var mSTeamMemberIDsParameter = mSTeamMemberIDs != null ?
                new ObjectParameter("MSTeamMemberIDs", mSTeamMemberIDs) :
                new ObjectParameter("MSTeamMemberIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardIDsParameter = standardIDs != null ?
                new ObjectParameter("StandardIDs", standardIDs) :
                new ObjectParameter("StandardIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rFIIncludeParameter = rFIInclude.HasValue ?
                new ObjectParameter("RFIInclude", rFIInclude) :
                new ObjectParameter("RFIInclude", typeof(bool));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CorpProgramFinding>("GetCorpFindingByProgram", siteIDsParameter, mockSurveyIDsParameter, mSTeamLeadIDsParameter, mSTeamMemberIDsParameter, programIDsParameter, standardIDsParameter, chapterIDsParameter, startDateParameter, endDateParameter, rFIIncludeParameter, onlyFSAEPsParameter, statusIDParameter, standardEffBeginDateParameter);
        }
    
        public virtual ObjectResult<CorpStandardFinding> GetCorpFindingByStandard(string siteIDs, string mockSurveyIDs, string mSTeamLeadIDs, string mSTeamMemberIDs, string programIDs, string standardIDs, string chapterIDs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> rFIInclude, Nullable<bool> onlyFSAEPs, Nullable<int> statusID, Nullable<System.DateTime> standardEffBeginDate)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var mockSurveyIDsParameter = mockSurveyIDs != null ?
                new ObjectParameter("MockSurveyIDs", mockSurveyIDs) :
                new ObjectParameter("MockSurveyIDs", typeof(string));
    
            var mSTeamLeadIDsParameter = mSTeamLeadIDs != null ?
                new ObjectParameter("MSTeamLeadIDs", mSTeamLeadIDs) :
                new ObjectParameter("MSTeamLeadIDs", typeof(string));
    
            var mSTeamMemberIDsParameter = mSTeamMemberIDs != null ?
                new ObjectParameter("MSTeamMemberIDs", mSTeamMemberIDs) :
                new ObjectParameter("MSTeamMemberIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardIDsParameter = standardIDs != null ?
                new ObjectParameter("StandardIDs", standardIDs) :
                new ObjectParameter("StandardIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rFIIncludeParameter = rFIInclude.HasValue ?
                new ObjectParameter("RFIInclude", rFIInclude) :
                new ObjectParameter("RFIInclude", typeof(bool));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CorpStandardFinding>("GetCorpFindingByStandard", siteIDsParameter, mockSurveyIDsParameter, mSTeamLeadIDsParameter, mSTeamMemberIDsParameter, programIDsParameter, standardIDsParameter, chapterIDsParameter, startDateParameter, endDateParameter, rFIIncludeParameter, onlyFSAEPsParameter, statusIDParameter, standardEffBeginDateParameter);
        }
    
        public virtual ObjectResult<Chapter> GetChapter(string siteList, string programIDs, Nullable<System.DateTime> standardEffBeginDate)
        {
            var siteListParameter = siteList != null ?
                new ObjectParameter("SiteList", siteList) :
                new ObjectParameter("SiteList", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Chapter>("GetChapter", siteListParameter, programIDsParameter, standardEffBeginDateParameter);
        }
    
        public virtual ObjectResult<Programs> GetProgrambySites(string siteIDs, Nullable<System.DateTime> standardEffBeginDate)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Programs>("GetProgrambySites", siteIDsParameter, standardEffBeginDateParameter);
        }
    
        public virtual ObjectResult<Standard> GetStandardsByProgramsChapters(string chapterList, string programList)
        {
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var programListParameter = programList != null ?
                new ObjectParameter("ProgramList", programList) :
                new ObjectParameter("ProgramList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Standard>("GetStandardsByProgramsChapters", chapterListParameter, programListParameter);
        }
    
        public virtual ObjectResult<ScoredByUser> GetScoredByUsers(Nullable<int> siteID, Nullable<int> programID, string chapterList, string standardList, string scoreTypeList, Nullable<int> mockSurveyStatusID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeListParameter = scoreTypeList != null ?
                new ObjectParameter("ScoreTypeList", scoreTypeList) :
                new ObjectParameter("ScoreTypeList", typeof(string));
    
            var mockSurveyStatusIDParameter = mockSurveyStatusID.HasValue ?
                new ObjectParameter("MockSurveyStatusID", mockSurveyStatusID) :
                new ObjectParameter("MockSurveyStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ScoredByUser>("GetScoredByUsers", siteIDParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeListParameter, mockSurveyStatusIDParameter);
        }
    
        public virtual ObjectResult<UserSiteByProduct> GetUserSitesByProduct(Nullable<int> userID, Nullable<int> eProductID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var eProductIDParameter = eProductID.HasValue ?
                new ObjectParameter("EProductID", eProductID) :
                new ObjectParameter("EProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserSiteByProduct>("GetUserSitesByProduct", userIDParameter, eProductIDParameter);
        }
    
        public virtual ObjectResult<EpExcelDetails> GetEPExcelDetails(Nullable<int> siteID, Nullable<int> programID, string chapterList, string standardList, string scoreTypeList, string scoreValueList, string scoredByList, Nullable<int> notScoredInPeriodFlag, Nullable<int> includeFSA, Nullable<int> docRequired, Nullable<int> newChangedEPs, Nullable<int> planOfAction, Nullable<int> orgFindings, Nullable<int> orgNotes, Nullable<int> linkedDocs, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, Nullable<int> certificationItemID, Nullable<int> includeCMS)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeListParameter = scoreTypeList != null ?
                new ObjectParameter("ScoreTypeList", scoreTypeList) :
                new ObjectParameter("ScoreTypeList", typeof(string));
    
            var scoreValueListParameter = scoreValueList != null ?
                new ObjectParameter("ScoreValueList", scoreValueList) :
                new ObjectParameter("ScoreValueList", typeof(string));
    
            var scoredByListParameter = scoredByList != null ?
                new ObjectParameter("ScoredByList", scoredByList) :
                new ObjectParameter("ScoredByList", typeof(string));
    
            var notScoredInPeriodFlagParameter = notScoredInPeriodFlag.HasValue ?
                new ObjectParameter("NotScoredInPeriodFlag", notScoredInPeriodFlag) :
                new ObjectParameter("NotScoredInPeriodFlag", typeof(int));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(int));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(int));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(int));
    
            var planOfActionParameter = planOfAction.HasValue ?
                new ObjectParameter("PlanOfAction", planOfAction) :
                new ObjectParameter("PlanOfAction", typeof(int));
    
            var orgFindingsParameter = orgFindings.HasValue ?
                new ObjectParameter("OrgFindings", orgFindings) :
                new ObjectParameter("OrgFindings", typeof(int));
    
            var orgNotesParameter = orgNotes.HasValue ?
                new ObjectParameter("OrgNotes", orgNotes) :
                new ObjectParameter("OrgNotes", typeof(int));
    
            var linkedDocsParameter = linkedDocs.HasValue ?
                new ObjectParameter("LinkedDocs", linkedDocs) :
                new ObjectParameter("LinkedDocs", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var certificationItemIDParameter = certificationItemID.HasValue ?
                new ObjectParameter("CertificationItemID", certificationItemID) :
                new ObjectParameter("CertificationItemID", typeof(int));
    
            var includeCMSParameter = includeCMS.HasValue ?
                new ObjectParameter("IncludeCMS", includeCMS) :
                new ObjectParameter("IncludeCMS", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EpExcelDetails>("GetEPExcelDetails", siteIDParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeListParameter, scoreValueListParameter, scoredByListParameter, notScoredInPeriodFlagParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, planOfActionParameter, orgFindingsParameter, orgNotesParameter, linkedDocsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, certificationItemIDParameter, includeCMSParameter);
        }
    
        public virtual ObjectResult<RFIEPFinding> GetRFIFindingByEP(string siteIDs, string programIDs, string standardIDs, string chapterIDs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> onlyFSAEPs, Nullable<bool> rFIInclude, Nullable<bool> pSInclude, Nullable<bool> fSInclude)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var standardIDsParameter = standardIDs != null ?
                new ObjectParameter("StandardIDs", standardIDs) :
                new ObjectParameter("StandardIDs", typeof(string));
    
            var chapterIDsParameter = chapterIDs != null ?
                new ObjectParameter("ChapterIDs", chapterIDs) :
                new ObjectParameter("ChapterIDs", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var onlyFSAEPsParameter = onlyFSAEPs.HasValue ?
                new ObjectParameter("OnlyFSAEPs", onlyFSAEPs) :
                new ObjectParameter("OnlyFSAEPs", typeof(bool));
    
            var rFIIncludeParameter = rFIInclude.HasValue ?
                new ObjectParameter("RFIInclude", rFIInclude) :
                new ObjectParameter("RFIInclude", typeof(bool));
    
            var pSIncludeParameter = pSInclude.HasValue ?
                new ObjectParameter("PSInclude", pSInclude) :
                new ObjectParameter("PSInclude", typeof(bool));
    
            var fSIncludeParameter = fSInclude.HasValue ?
                new ObjectParameter("FSInclude", fSInclude) :
                new ObjectParameter("FSInclude", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RFIEPFinding>("GetRFIFindingByEP", siteIDsParameter, programIDsParameter, standardIDsParameter, chapterIDsParameter, startDateParameter, endDateParameter, onlyFSAEPsParameter, rFIIncludeParameter, pSIncludeParameter, fSIncludeParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetLicenseDetailsForCMS(Nullable<int> siteID, Nullable<int> programID, Nullable<int> subscriptionTypeID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetLicenseDetailsForCMS", siteIDParameter, programIDParameter, subscriptionTypeIDParameter);
        }
    
        public virtual ObjectResult<CMSSite> GetCMSSitesByProgramID(Nullable<int> programID, Nullable<int> subscriptionTypeID)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CMSSite>("GetCMSSitesByProgramID", programIDParameter, subscriptionTypeIDParameter);
        }
    
        public virtual ObjectResult<CMSProgram> GetCMSProgramsBySiteID(Nullable<int> siteID, Nullable<int> subscriptionTypeID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CMSProgram>("GetCMSProgramsBySiteID", siteIDParameter, subscriptionTypeIDParameter);
        }
    
        public virtual ObjectResult<CoP> GetCoPsByProgramID(string programIDs)
        {
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CoP>("GetCoPsByProgramID", programIDsParameter);
        }
    
        public virtual ObjectResult<Tag> GetTagsByProgramIDAndCoPID(string programIDs, string copIDs)
        {
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var copIDsParameter = copIDs != null ?
                new ObjectParameter("CopIDs", copIDs) :
                new ObjectParameter("CopIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tag>("GetTagsByProgramIDAndCoPID", programIDsParameter, copIDsParameter);
        }
    
        public virtual ObjectResult<IdentifiedUser> GetIdentifiedUsers(string siteIDs, string programIDs, string coPIDs, string tagIDs)
        {
            var siteIDsParameter = siteIDs != null ?
                new ObjectParameter("SiteIDs", siteIDs) :
                new ObjectParameter("SiteIDs", typeof(string));
    
            var programIDsParameter = programIDs != null ?
                new ObjectParameter("ProgramIDs", programIDs) :
                new ObjectParameter("ProgramIDs", typeof(string));
    
            var coPIDsParameter = coPIDs != null ?
                new ObjectParameter("CoPIDs", coPIDs) :
                new ObjectParameter("CoPIDs", typeof(string));
    
            var tagIDsParameter = tagIDs != null ?
                new ObjectParameter("TagIDs", tagIDs) :
                new ObjectParameter("TagIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IdentifiedUser>("GetIdentifiedUsers", siteIDsParameter, programIDsParameter, coPIDsParameter, tagIDsParameter);
        }
    
        public virtual ObjectResult<CMSComplianceExcel> GetCMSComplianceExcel(Nullable<int> siteID, Nullable<int> programID, string complianceValueList, string coPIDs, string tagIDs, string identifiedByIDs, Nullable<int> planOfCorrection, Nullable<int> orgCMSFindings, Nullable<int> cMSSurveyorFindings, Nullable<int> linkedDocs, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> standardEffBeginDate, Nullable<int> certificationItemID, Nullable<bool> includeTJC)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var complianceValueListParameter = complianceValueList != null ?
                new ObjectParameter("ComplianceValueList", complianceValueList) :
                new ObjectParameter("ComplianceValueList", typeof(string));
    
            var coPIDsParameter = coPIDs != null ?
                new ObjectParameter("CoPIDs", coPIDs) :
                new ObjectParameter("CoPIDs", typeof(string));
    
            var tagIDsParameter = tagIDs != null ?
                new ObjectParameter("TagIDs", tagIDs) :
                new ObjectParameter("TagIDs", typeof(string));
    
            var identifiedByIDsParameter = identifiedByIDs != null ?
                new ObjectParameter("IdentifiedByIDs", identifiedByIDs) :
                new ObjectParameter("IdentifiedByIDs", typeof(string));
    
            var planOfCorrectionParameter = planOfCorrection.HasValue ?
                new ObjectParameter("PlanOfCorrection", planOfCorrection) :
                new ObjectParameter("PlanOfCorrection", typeof(int));
    
            var orgCMSFindingsParameter = orgCMSFindings.HasValue ?
                new ObjectParameter("OrgCMSFindings", orgCMSFindings) :
                new ObjectParameter("OrgCMSFindings", typeof(int));
    
            var cMSSurveyorFindingsParameter = cMSSurveyorFindings.HasValue ?
                new ObjectParameter("CMSSurveyorFindings", cMSSurveyorFindings) :
                new ObjectParameter("CMSSurveyorFindings", typeof(int));
    
            var linkedDocsParameter = linkedDocs.HasValue ?
                new ObjectParameter("LinkedDocs", linkedDocs) :
                new ObjectParameter("LinkedDocs", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var certificationItemIDParameter = certificationItemID.HasValue ?
                new ObjectParameter("CertificationItemID", certificationItemID) :
                new ObjectParameter("CertificationItemID", typeof(int));
    
            var includeTJCParameter = includeTJC.HasValue ?
                new ObjectParameter("IncludeTJC", includeTJC) :
                new ObjectParameter("IncludeTJC", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CMSComplianceExcel>("GetCMSComplianceExcel", siteIDParameter, programIDParameter, complianceValueListParameter, coPIDsParameter, tagIDsParameter, identifiedByIDsParameter, planOfCorrectionParameter, orgCMSFindingsParameter, cMSSurveyorFindingsParameter, linkedDocsParameter, startDateParameter, endDateParameter, standardEffBeginDateParameter, certificationItemIDParameter, includeTJCParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetLicenseDetailsForCMSByUser(Nullable<int> userID, Nullable<int> subscriptionTypeID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetLicenseDetailsForCMSByUser", userIDParameter, subscriptionTypeIDParameter);
        }
    
        public virtual ObjectResult<StickyDate> GetStickyDates(Nullable<int> siteID, Nullable<int> userID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StickyDate>("GetStickyDates", siteIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<EPScoringReportFinalMockSurveySummary> GetReportEPScoringReportFinalMockSurveySummary(Nullable<int> siteID, Nullable<int> programID, string chapterList, string standardList, string scoreTypeList, string scoreValueList, string scoredByList, string mockSurveyIDList, Nullable<int> mockSurveyStatusID, Nullable<int> includeFSA, Nullable<int> docRequired, Nullable<int> newChangedEPs, Nullable<int> planOfAction, Nullable<int> orgFindings, Nullable<int> orgNotes, Nullable<int> linkedDocs, Nullable<int> mockSurveyFindings, Nullable<int> mockSurveyRecommendations, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, Nullable<int> certificationItemID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeListParameter = scoreTypeList != null ?
                new ObjectParameter("ScoreTypeList", scoreTypeList) :
                new ObjectParameter("ScoreTypeList", typeof(string));
    
            var scoreValueListParameter = scoreValueList != null ?
                new ObjectParameter("ScoreValueList", scoreValueList) :
                new ObjectParameter("ScoreValueList", typeof(string));
    
            var scoredByListParameter = scoredByList != null ?
                new ObjectParameter("ScoredByList", scoredByList) :
                new ObjectParameter("ScoredByList", typeof(string));
    
            var mockSurveyIDListParameter = mockSurveyIDList != null ?
                new ObjectParameter("MockSurveyIDList", mockSurveyIDList) :
                new ObjectParameter("MockSurveyIDList", typeof(string));
    
            var mockSurveyStatusIDParameter = mockSurveyStatusID.HasValue ?
                new ObjectParameter("MockSurveyStatusID", mockSurveyStatusID) :
                new ObjectParameter("MockSurveyStatusID", typeof(int));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(int));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(int));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(int));
    
            var planOfActionParameter = planOfAction.HasValue ?
                new ObjectParameter("PlanOfAction", planOfAction) :
                new ObjectParameter("PlanOfAction", typeof(int));
    
            var orgFindingsParameter = orgFindings.HasValue ?
                new ObjectParameter("OrgFindings", orgFindings) :
                new ObjectParameter("OrgFindings", typeof(int));
    
            var orgNotesParameter = orgNotes.HasValue ?
                new ObjectParameter("OrgNotes", orgNotes) :
                new ObjectParameter("OrgNotes", typeof(int));
    
            var linkedDocsParameter = linkedDocs.HasValue ?
                new ObjectParameter("LinkedDocs", linkedDocs) :
                new ObjectParameter("LinkedDocs", typeof(int));
    
            var mockSurveyFindingsParameter = mockSurveyFindings.HasValue ?
                new ObjectParameter("MockSurveyFindings", mockSurveyFindings) :
                new ObjectParameter("MockSurveyFindings", typeof(int));
    
            var mockSurveyRecommendationsParameter = mockSurveyRecommendations.HasValue ?
                new ObjectParameter("MockSurveyRecommendations", mockSurveyRecommendations) :
                new ObjectParameter("MockSurveyRecommendations", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var certificationItemIDParameter = certificationItemID.HasValue ?
                new ObjectParameter("CertificationItemID", certificationItemID) :
                new ObjectParameter("CertificationItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EPScoringReportFinalMockSurveySummary>("GetReportEPScoringReportFinalMockSurveySummary", siteIDParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeListParameter, scoreValueListParameter, scoredByListParameter, mockSurveyIDListParameter, mockSurveyStatusIDParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, planOfActionParameter, orgFindingsParameter, orgNotesParameter, linkedDocsParameter, mockSurveyFindingsParameter, mockSurveyRecommendationsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, certificationItemIDParameter);
        }
    
        public virtual ObjectResult<EPScoringReportFinalMockSurveyDetail> GetReportEPScoringReportFinalMockSurveyDetail(Nullable<int> siteID, Nullable<int> programID, string chapterList, string standardList, string scoreTypeList, string scoreValueList, string scoredByList, string mockSurveyIDList, Nullable<int> mockSurveyStatusID, Nullable<int> includeFSA, Nullable<int> docRequired, Nullable<int> newChangedEPs, Nullable<int> planOfAction, Nullable<int> orgFindings, Nullable<int> orgNotes, Nullable<int> linkedDocs, Nullable<int> mockSurveyFindings, Nullable<int> mockSurveyRecommendations, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, Nullable<int> certificationItemID, Nullable<int> includeCMS)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeListParameter = scoreTypeList != null ?
                new ObjectParameter("ScoreTypeList", scoreTypeList) :
                new ObjectParameter("ScoreTypeList", typeof(string));
    
            var scoreValueListParameter = scoreValueList != null ?
                new ObjectParameter("ScoreValueList", scoreValueList) :
                new ObjectParameter("ScoreValueList", typeof(string));
    
            var scoredByListParameter = scoredByList != null ?
                new ObjectParameter("ScoredByList", scoredByList) :
                new ObjectParameter("ScoredByList", typeof(string));
    
            var mockSurveyIDListParameter = mockSurveyIDList != null ?
                new ObjectParameter("MockSurveyIDList", mockSurveyIDList) :
                new ObjectParameter("MockSurveyIDList", typeof(string));
    
            var mockSurveyStatusIDParameter = mockSurveyStatusID.HasValue ?
                new ObjectParameter("MockSurveyStatusID", mockSurveyStatusID) :
                new ObjectParameter("MockSurveyStatusID", typeof(int));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(int));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(int));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(int));
    
            var planOfActionParameter = planOfAction.HasValue ?
                new ObjectParameter("PlanOfAction", planOfAction) :
                new ObjectParameter("PlanOfAction", typeof(int));
    
            var orgFindingsParameter = orgFindings.HasValue ?
                new ObjectParameter("OrgFindings", orgFindings) :
                new ObjectParameter("OrgFindings", typeof(int));
    
            var orgNotesParameter = orgNotes.HasValue ?
                new ObjectParameter("OrgNotes", orgNotes) :
                new ObjectParameter("OrgNotes", typeof(int));
    
            var linkedDocsParameter = linkedDocs.HasValue ?
                new ObjectParameter("LinkedDocs", linkedDocs) :
                new ObjectParameter("LinkedDocs", typeof(int));
    
            var mockSurveyFindingsParameter = mockSurveyFindings.HasValue ?
                new ObjectParameter("MockSurveyFindings", mockSurveyFindings) :
                new ObjectParameter("MockSurveyFindings", typeof(int));
    
            var mockSurveyRecommendationsParameter = mockSurveyRecommendations.HasValue ?
                new ObjectParameter("MockSurveyRecommendations", mockSurveyRecommendations) :
                new ObjectParameter("MockSurveyRecommendations", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var certificationItemIDParameter = certificationItemID.HasValue ?
                new ObjectParameter("CertificationItemID", certificationItemID) :
                new ObjectParameter("CertificationItemID", typeof(int));
    
            var includeCMSParameter = includeCMS.HasValue ?
                new ObjectParameter("IncludeCMS", includeCMS) :
                new ObjectParameter("IncludeCMS", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EPScoringReportFinalMockSurveyDetail>("GetReportEPScoringReportFinalMockSurveyDetail", siteIDParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeListParameter, scoreValueListParameter, scoredByListParameter, mockSurveyIDListParameter, mockSurveyStatusIDParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, planOfActionParameter, orgFindingsParameter, orgNotesParameter, linkedDocsParameter, mockSurveyFindingsParameter, mockSurveyRecommendationsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, certificationItemIDParameter, includeCMSParameter);
        }
    
        public virtual ObjectResult<EPAssignmentScoringDetail> GetReportEPAssignmentScoringDetail(Nullable<int> siteID, Nullable<int> programID, string chapterList, string standardList, string scoreTypeList, string scoreValueList, string assignedToList, Nullable<int> includeFSA, Nullable<int> docRequired, Nullable<int> newChangedEPs, Nullable<int> planOfAction, Nullable<int> orgFindings, Nullable<int> orgNotes, Nullable<int> linkedDocs, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, Nullable<int> certificationItemID, Nullable<int> includeCMS, Nullable<int> ePAssigned, Nullable<int> ePNotAssigned)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeListParameter = scoreTypeList != null ?
                new ObjectParameter("ScoreTypeList", scoreTypeList) :
                new ObjectParameter("ScoreTypeList", typeof(string));
    
            var scoreValueListParameter = scoreValueList != null ?
                new ObjectParameter("ScoreValueList", scoreValueList) :
                new ObjectParameter("ScoreValueList", typeof(string));
    
            var assignedToListParameter = assignedToList != null ?
                new ObjectParameter("AssignedToList", assignedToList) :
                new ObjectParameter("AssignedToList", typeof(string));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(int));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(int));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(int));
    
            var planOfActionParameter = planOfAction.HasValue ?
                new ObjectParameter("PlanOfAction", planOfAction) :
                new ObjectParameter("PlanOfAction", typeof(int));
    
            var orgFindingsParameter = orgFindings.HasValue ?
                new ObjectParameter("OrgFindings", orgFindings) :
                new ObjectParameter("OrgFindings", typeof(int));
    
            var orgNotesParameter = orgNotes.HasValue ?
                new ObjectParameter("OrgNotes", orgNotes) :
                new ObjectParameter("OrgNotes", typeof(int));
    
            var linkedDocsParameter = linkedDocs.HasValue ?
                new ObjectParameter("LinkedDocs", linkedDocs) :
                new ObjectParameter("LinkedDocs", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var certificationItemIDParameter = certificationItemID.HasValue ?
                new ObjectParameter("CertificationItemID", certificationItemID) :
                new ObjectParameter("CertificationItemID", typeof(int));
    
            var includeCMSParameter = includeCMS.HasValue ?
                new ObjectParameter("IncludeCMS", includeCMS) :
                new ObjectParameter("IncludeCMS", typeof(int));
    
            var ePAssignedParameter = ePAssigned.HasValue ?
                new ObjectParameter("EPAssigned", ePAssigned) :
                new ObjectParameter("EPAssigned", typeof(int));
    
            var ePNotAssignedParameter = ePNotAssigned.HasValue ?
                new ObjectParameter("EPNotAssigned", ePNotAssigned) :
                new ObjectParameter("EPNotAssigned", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EPAssignmentScoringDetail>("GetReportEPAssignmentScoringDetail", siteIDParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeListParameter, scoreValueListParameter, assignedToListParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, planOfActionParameter, orgFindingsParameter, orgNotesParameter, linkedDocsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, certificationItemIDParameter, includeCMSParameter, ePAssignedParameter, ePNotAssignedParameter);
        }
    
        public virtual ObjectResult<EPAssignmentScoringSummary> GetReportEPAssignmentScoringSummary(Nullable<int> siteID, Nullable<int> programID, string chapterList, string standardList, string scoreTypeList, string scoreValueList, string assignedToList, Nullable<int> ePAssigned, Nullable<int> ePNotAssigned, Nullable<int> includeFSA, Nullable<int> docRequired, Nullable<int> newChangedEPs, Nullable<int> planOfAction, Nullable<int> orgFindings, Nullable<int> orgNotes, Nullable<int> linkedDocs, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, Nullable<int> certificationItemID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterListParameter = chapterList != null ?
                new ObjectParameter("ChapterList", chapterList) :
                new ObjectParameter("ChapterList", typeof(string));
    
            var standardListParameter = standardList != null ?
                new ObjectParameter("StandardList", standardList) :
                new ObjectParameter("StandardList", typeof(string));
    
            var scoreTypeListParameter = scoreTypeList != null ?
                new ObjectParameter("ScoreTypeList", scoreTypeList) :
                new ObjectParameter("ScoreTypeList", typeof(string));
    
            var scoreValueListParameter = scoreValueList != null ?
                new ObjectParameter("ScoreValueList", scoreValueList) :
                new ObjectParameter("ScoreValueList", typeof(string));
    
            var assignedToListParameter = assignedToList != null ?
                new ObjectParameter("AssignedToList", assignedToList) :
                new ObjectParameter("AssignedToList", typeof(string));
    
            var ePAssignedParameter = ePAssigned.HasValue ?
                new ObjectParameter("EPAssigned", ePAssigned) :
                new ObjectParameter("EPAssigned", typeof(int));
    
            var ePNotAssignedParameter = ePNotAssigned.HasValue ?
                new ObjectParameter("EPNotAssigned", ePNotAssigned) :
                new ObjectParameter("EPNotAssigned", typeof(int));
    
            var includeFSAParameter = includeFSA.HasValue ?
                new ObjectParameter("IncludeFSA", includeFSA) :
                new ObjectParameter("IncludeFSA", typeof(int));
    
            var docRequiredParameter = docRequired.HasValue ?
                new ObjectParameter("DocRequired", docRequired) :
                new ObjectParameter("DocRequired", typeof(int));
    
            var newChangedEPsParameter = newChangedEPs.HasValue ?
                new ObjectParameter("NewChangedEPs", newChangedEPs) :
                new ObjectParameter("NewChangedEPs", typeof(int));
    
            var planOfActionParameter = planOfAction.HasValue ?
                new ObjectParameter("PlanOfAction", planOfAction) :
                new ObjectParameter("PlanOfAction", typeof(int));
    
            var orgFindingsParameter = orgFindings.HasValue ?
                new ObjectParameter("OrgFindings", orgFindings) :
                new ObjectParameter("OrgFindings", typeof(int));
    
            var orgNotesParameter = orgNotes.HasValue ?
                new ObjectParameter("OrgNotes", orgNotes) :
                new ObjectParameter("OrgNotes", typeof(int));
    
            var linkedDocsParameter = linkedDocs.HasValue ?
                new ObjectParameter("LinkedDocs", linkedDocs) :
                new ObjectParameter("LinkedDocs", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var certificationItemIDParameter = certificationItemID.HasValue ?
                new ObjectParameter("CertificationItemID", certificationItemID) :
                new ObjectParameter("CertificationItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EPAssignmentScoringSummary>("GetReportEPAssignmentScoringSummary", siteIDParameter, programIDParameter, chapterListParameter, standardListParameter, scoreTypeListParameter, scoreValueListParameter, assignedToListParameter, ePAssignedParameter, ePNotAssignedParameter, includeFSAParameter, docRequiredParameter, newChangedEPsParameter, planOfActionParameter, orgFindingsParameter, orgNotesParameter, linkedDocsParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, certificationItemIDParameter);
        }
    
        public virtual ObjectResult<ComprehensiveScoringDetail> GetReportComprehensiveScoringDetail(Nullable<int> siteID, Nullable<int> programID, Nullable<int> chapterID, Nullable<int> mockSurveyStatusID, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, Nullable<System.DateTime> standardEffBeginDate, Nullable<int> certificationItemID, Nullable<int> includeCMS, Nullable<bool> isCorporateAccess)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var chapterIDParameter = chapterID.HasValue ?
                new ObjectParameter("ChapterID", chapterID) :
                new ObjectParameter("ChapterID", typeof(int));
    
            var mockSurveyStatusIDParameter = mockSurveyStatusID.HasValue ?
                new ObjectParameter("MockSurveyStatusID", mockSurveyStatusID) :
                new ObjectParameter("MockSurveyStatusID", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var standardEffBeginDateParameter = standardEffBeginDate.HasValue ?
                new ObjectParameter("StandardEffBeginDate", standardEffBeginDate) :
                new ObjectParameter("StandardEffBeginDate", typeof(System.DateTime));
    
            var certificationItemIDParameter = certificationItemID.HasValue ?
                new ObjectParameter("CertificationItemID", certificationItemID) :
                new ObjectParameter("CertificationItemID", typeof(int));
    
            var includeCMSParameter = includeCMS.HasValue ?
                new ObjectParameter("IncludeCMS", includeCMS) :
                new ObjectParameter("IncludeCMS", typeof(int));
    
            var isCorporateAccessParameter = isCorporateAccess.HasValue ?
                new ObjectParameter("IsCorporateAccess", isCorporateAccess) :
                new ObjectParameter("IsCorporateAccess", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ComprehensiveScoringDetail>("GetReportComprehensiveScoringDetail", siteIDParameter, programIDParameter, chapterIDParameter, mockSurveyStatusIDParameter, dateStartParameter, dateEndParameter, standardEffBeginDateParameter, certificationItemIDParameter, includeCMSParameter, isCorporateAccessParameter);
        }
    }
}
